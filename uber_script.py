#!/usr/bin/env python3

# Main script.
# python3 $lexi_project/uber_script.py $USER $PASSWORD $lexi_project $CLEAN $DIACRITICS $HEADER_LEXICON $FINAL_INPUT_FILE
#
#
# Dependencies: CLAM (lm on Ponyland)
# Feel free to change the constants' values on:
# uber_script.py, local/prepare_lexicon.py and local/join_files.py
#
#
# There are two options (change the value manually please):
# OPTION = 1
# This script provides a lexicon file with the following sintax
# <word><tab-symbol><phonetic-transcription> in each line
# from a unique file (wordlist)
#
# Digits can be handled if you provide a mapping script on 
# prepare_lexicon.py
#
# You can also provide a exceptions table for specific phonetic 
# transcriptions
#
# The final lexicon file can contain disambiguation symbols 
# on duplicate pronunciation entries if you set it True on jon_files.py
#
# OPTION = 2
# Req: utils/extracting_words.py
# You can obtain a unique input file from a list of files on a source folder.
# This source folder should be pre-generated by utils/extracting_words.py
#
#
# @author Cristian TG
# @since 2021/04/02

import os
import shutil
import sys

if (len(sys.argv) < 9):
    print("You must add eight arguments: username, password; this project abs. path; 0/1 for cleaning data: 0/1 forc leaning diacritics; the header file for the lexicon file; the input/wordlist file path; the output folder")
    sys.exit(-1)
WEBSERVICES_USERNAME = sys.argv[1]
WEBSERVICES_PASSWORD = sys.argv[2]
THIS_PROJECT_PATH = sys.argv[3]
need_to_clean = sys.argv[4]
delete_diacritics = sys.argv[5]
HEADER_LEXICON = sys.argv[6]
FINAL_INPUT_FILE = sys.argv[7]
OUTPUT_FOLDER = sys.argv[8]

# Change this value manually
OPTION = 1


# ---------------- OPTION = 1 ----------------
# Obtains a lexicon file
# Just one execution (one folder)
# Just one output lexicon = 1
SUFFIX_OUTPUT_FOLDER = "results"


# ---------------- OPTION = 2 ----------------
# Prepares a unique input file from a set of files on a directory
# It does not obtain a lexicon file.
# N executions (n folders)
# N lexicons, lexicon = 2

# Change these values if you set lexicon = 2:
# Raw input files folder (all of them to be iterated one by one)
RAW_DATA_FOLDER = os.path.join(THIS_PROJECT_PATH,"raw_input")
# Raw input file folder (just one of them)
RAW_OUTPUT_FOLDER = os.path.join(THIS_PROJECT_PATH, "raw")


# ---------------- ANY OPTION ----------------
# name+/ Autogenerate files in this folder
AUX_FOLDER = os.path.join(OUTPUT_FOLDER,'aux/')
# name+/ Autogenerate files in this folder 
DICT_FOLDER = os.path.join(OUTPUT_FOLDER,'dict/')



#########################################################
#########################################################
def main_loop(m_file, aux_file):
  # name+/ Autogenerate files in this folder
  FINAL_FOLDER = os.path.join(OUTPUT_FOLDER,m_file+'-final')
  if not os.path.exists(FINAL_FOLDER):
    os.makedirs(FINAL_FOLDER)
  # name+/ Autogenerate files in this folder 
  MAPPING_FILE_PATH = os.path.join(FINAL_FOLDER,'mapping.txt')
  open(MAPPING_FILE_PATH, 'w').close()


  if not os.path.exists(OUTPUT_FOLDER):
    os.makedirs(OUTPUT_FOLDER)

  if not os.path.exists(AUX_FOLDER):
    os.makedirs(AUX_FOLDER)
  else:
    os.system('rm -r ' + AUX_FOLDER + '*')

  if not os.path.exists(DICT_FOLDER):
    os.makedirs(DICT_FOLDER)
  else:
    os.system('rm -r ' + DICT_FOLDER + '*')

  print('######## 1/3 ######### python3 local/prepare_lexicon.py', AUX_FOLDER, MAPPING_FILE_PATH, need_to_clean, delete_diacritics, FINAL_INPUT_FILE)
  os.system('python3 '+THIS_PROJECT_PATH+'/local/prepare_lexicon.py '+AUX_FOLDER + ' ' + MAPPING_FILE_PATH+' '+need_to_clean+' '+delete_diacritics+ ' '+FINAL_INPUT_FILE)

  print('\n######## 2/3 ######### python3 local/g2p_ws.py', WEBSERVICES_USERNAME, "*PASSWORD*", AUX_FOLDER, DICT_FOLDER)
  os.system('python3 '+THIS_PROJECT_PATH+'/local/g2p_ws.py ' + WEBSERVICES_USERNAME + ' ' + WEBSERVICES_PASSWORD + ' ' + AUX_FOLDER + ' ' + DICT_FOLDER)

  print('\n######## 3/3 ######### python3 local/join_files.py', DICT_FOLDER, FINAL_FOLDER, MAPPING_FILE_PATH)
  os.system('python3 '+THIS_PROJECT_PATH+'/local/join_files.py '+DICT_FOLDER + ' ' + FINAL_FOLDER + ' ' + MAPPING_FILE_PATH + ' "' + HEADER_LEXICON+'"')

  if os.path.exists(aux_file):
    os.remove(aux_file)


# OPTION 1: There is already prepared an inputFile in input
if OPTION == 1:
  main_loop(SUFFIX_OUTPUT_FOLDER, "")
elif OPTION == 2:
  # OPTION 2: Prepare an inputFile in input
  onlyfiles = [f for f in os.listdir(
      RAW_DATA_FOLDER) if os.path.isfile(os.path.join(RAW_DATA_FOLDER, f))]
  counter = 0
  GITKEEP = ".gitkeep"
  if GITKEEP in onlyfiles:
      onlyfiles.remove(GITKEEP)

  for m_file in onlyfiles:
      counter += 1
      currentFile = RAW_DATA_FOLDER+os.sep+m_file
      print("\nuber: "+RAW_DATA_FOLDER + os.sep+m_file +
            " -> " + str(counter)+"/"+str(len(onlyfiles)))
      aux_file = RAW_OUTPUT_FOLDER+os.sep+m_file
      shutil.copy(currentFile, aux_file)
      print("- copied temporal file in "+aux_file)
      os.system('python3 '+THIS_PROJECT_PATH+'/utils/preparing_raw_data.py '+RAW_OUTPUT_FOLDER)
